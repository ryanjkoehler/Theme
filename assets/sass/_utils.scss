/**
 * Takes a value provided as decimal to be used
 * in declaring the font-size in rem units. Then converted
 * back into a fallback px size for browsers that don't support the unit.
 * 
 */
@mixin rem( $property, $value: 1.6) {
	#{$property}: ($value * 10) + px;
	#{$property}: $value + rem;
}

@mixin font-size( $size_value: 1.6 ) {
	@include rem( "font-size", $size_value);
}

$fix-mqs: false;
@mixin respond-min($width) {
	//
	@if $fix-mqs {
		@if $fix-mqs >= $width {
			@content;
		}
	}
	@else {
		// Otherwise, output it using a regular media query
		@media screen and (min-width: $width) {
			@content;
		}
	}
}

@mixin respond-max($width) {
	@if $fix-mqs {
		@if $fix-mqs <= $width {
			@content;
		}
	}
	@else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}

@function size_in_context( $size, $context ) {
	@return ($size / $context) * 100%;
}

@mixin col_width($no) {
	width: $no * $size_grid_percentage;
}

/**
 *  
 */
@mixin input-shadow( $colour: $colour_background, $left_border: $grid_padding * .33 ) {
    @include box-shadow(
      inset $left_border -.1rem 0 $colour,
      inset -.1rem .1rem 0 $colour
    );
}